<?php

namespace Bss\Mostview\Block;

class Mostviewproduct extends \Magento\Catalog\Block\Product\AbstractProduct
{

    const DEFAULT_COLLECTION_SORT_BY = 'name';
    const DEFAULT_COLLECTION_ORDER = 'asc';

    protected $mostViewedCollection;
    protected $wishListHelper;
    protected $_defaultToolbarBlock = 'Magento\Catalog\Block\Product\ProductList\Toolbar';
    protected $_objectManager;
    protected $_eventTypeFactory;
    protected $_productEntityTableName;

    public function __construct(
        \Magento\Catalog\Block\Product\Context $context,
        \Magento\Framework\App\ResourceConnection $resource,
        \Magento\Framework\Url\Helper\Data $urlHelper,
        \Magento\Reports\Model\ResourceModel\Product\CollectionFactory $mostViewedCollectionFactory,
        \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $productCollectionFactory,
        \Magento\Reports\Model\Event\TypeFactory $eventTypeFactory,
        \Magento\Wishlist\Helper\Data $wishListHelper,
        \Magento\Framework\ObjectManagerInterface $objectManager,
        array $data = []
    )
    {
        $this->_coreResource = $resource;
        $this->urlHelper = $urlHelper;
        $this->mostViewedCollection = $mostViewedCollectionFactory->create();
        $this->_productCollectionFactory = $productCollectionFactory;
        $this->_eventTypeFactory = $eventTypeFactory;
        $this->wishListHelper = $wishListHelper;
        $this->_objectManager = $objectManager;
        parent::__construct($context, $data);
    }

    public function getMostViewed()
    {


        return $this->addViewsCountCustom();
    }

    /**
     * Get product entity table name
     * @codeCoverageIgnore
     *
     * @return string
     */
    public function getProductEntityTableName()
    {
        return $this->_productEntityTableName;
    }

    protected function _beforeToHtml()
    {

        $this->setProductCollection($this->getMostViewed());

        return parent::_beforeToHtml(); // TODO: Change the autogenerated stub
    }

    protected function getShowCart()
    {
        if (!$this->hasData('show_add_to_cart')) {
            $this->setData('show_add_to_cart', self::DEFAULT_SHOW_ADDTOCART);
        }
        return (bool)$this->getData('show_add_to_cart');
    }

//    Get Category value
    protected function getCategory()
    {

        return $this->getData('wd_category');

    }

    protected function getFromDate()
    {
        return $this->getData('from_date');
    }

    protected function getToDate()
    {
        return $this->getData('to_date');
    }


    public function getSortBy()
    {
        if (!$this->hasData('collection_sort_by')) {
            $this->setData('collection_sort_by', self::DEFAULT_COLLECTION_SORT_BY);
        }
        return $this->getData('collection_sort_by');
    }

    public function getSortOrder()
    {
        if (!$this->hasData('collection_sort_order')) {
            $this->setData('collection_sort_order', self::DEFAULT_COLLECTION_ORDER);
        }
        return $this->getData('collection_sort_order');
    }

    public function addViewsCountCustom($from = '', $to = '')
    {
        /**
         * Getting event type id for catalog_product_view event
         */
        $storeId = $this->_storeManager->getStore()->getId();

        $collection = $this->mostViewedCollection
            ->addAttributeToSelect('*')
            ->setStoreId($storeId)
            ->addStoreFilter($storeId);

        $eventTypes = $this->_eventTypeFactory->create()->getCollection();
        foreach ($eventTypes as $eventType) {
            if ($eventType->getEventName() == 'catalog_product_view') {
                $productViewEvent = (int)$eventType->getId();
                break;
            }
        }

        $collection->getSelect()->reset()->from(
            ['report_table_views' => $this->mostViewedCollection->getTable('report_event')],
            ['views' => 'COUNT(report_table_views.event_id)']
        )->join(
            ['e' => $this->mostViewedCollection->getProductEntityTableName()],
            'e.entity_id = report_table_views.object_id'
        )->where(
            'report_table_views.event_type_id = ?',
            $productViewEvent
        )->group(
            'e.entity_id'
        )->having(
            'COUNT(report_table_views.event_id) > ?',
            0
        );

        if ($from != '' && $to != '') {
            $collection->getSelect()->where('logged_at >= ?', $from)->where('logged_at <= ?', $to);
        }

        if ($this->getCategory()){
            $collection->addCategoriesFilter( (array('in' => $this->getCategory())));
        }

        if ($this->getSortBy()) {
            $collection->addAttributeToSort($this->getSortBy(),$this->getSortOrder());
        }

        return $collection;
    }




}